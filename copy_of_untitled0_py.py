# -*- coding: utf-8 -*-
"""Copy of Untitled0.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tNHS3zEKY5YlEKF9O84BVvGSxAf0bC0b
"""

import streamlit as st
import os
import json
import uuid
from datetime import datetime
from transformers import AutoProcessor, AutoModelForSpeechSeq2Seq, AutoTokenizer, AutoModelForCausalLM

from pathlib import Path
import tempfile
import zipfile
from io import BytesIO
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EchoVerse:
    def __init__(self):
        self.base_dir = Path("echoverse_projects")
        self.base_dir.mkdir(exist_ok=True)
        self.setup_models()

    @st.cache_resource
    def setup_models(_self):
        """Initialize AI models with caching for performance"""
        try:
            st.info("üîÑ Loading AI models... This may take a few minutes on first run.")

            # Load IBM Granite model for text processing
            _self.text_processor = AutoTokenizer.from_pretrained("ibm-granite/granite-3b-code-instruct")
            _self.text_model = AutoModelForCausalLM.from_pretrained(
                "ibm-granite/granite-3b-code-instruct"
            )

            # Note: For actual TTS, you'd need additional models like Coqui TTS or similar
            # This is a placeholder for the TTS functionality

            st.success("‚úÖ Models loaded successfully!")
            return True

        except Exception as e:
            st.error(f"‚ùå Error loading models: {str(e)}")
            logger.error(f"Model loading error: {e}")
            return False

    def create_project_folder(self, project_name):
        """Create individual folder for each project"""
        project_id = str(uuid.uuid4())[:8]
        project_folder = self.base_dir / f"{project_name}{project_id}{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        project_folder.mkdir(exist_ok=True)

        # Create subfolders
        (project_folder / "text").mkdir(exist_ok=True)
        (project_folder / "audio").mkdir(exist_ok=True)
        (project_folder / "metadata").mkdir(exist_ok=True)

        return project_folder

    def rewrite_text_with_tone(self, text, tone):
        """Use IBM Granite model to rewrite text with specified tone"""
        tone_prompts = {
            "Neutral": "Rewrite the following text in a clear, neutral, and professional tone while maintaining the original meaning:",
            "Suspenseful": "Rewrite the following text with a suspenseful, mysterious, and engaging tone that builds tension:",
            "Inspiring": "Rewrite the following text with an inspiring, motivational, and uplifting tone that energizes the reader:"
        }

        prompt = f"{tone_prompts[tone]}\n\nOriginal text: {text}\n\nRewritten text:"

        try:
            inputs = _self.text_processor(prompt, return_tensors="pt", max_length=1024, truncation=True)

            outputs = _self.text_model.generate(
                **inputs,
                max_new_tokens=len(text.split()) * 2,  # Allow for expansion
                temperature=0.7,
                do_sample=True,
                pad_token_id=_self.text_processor.eos_token_id
            )

            generated_text = _self.text_processor.decode(outputs[0], skip_special_tokens=True)
            # Extract only the rewritten part
            rewritten = generated_text.split("Rewritten text:")[-1].strip()

            return rewritten if rewritten else text

        except Exception as e:
            logger.error(f"Text rewriting error: {e}")
            st.warning(f"‚ö† Text rewriting failed: {str(e)}. Using original text.")
            return text

    def text_to_speech_placeholder(self, text, project_folder):
        """Placeholder for TTS functionality - would need actual TTS model"""
        # In a real implementation, you'd use a TTS model here
        # For now, we'll create a placeholder audio file
        audio_path = project_folder / "audio" / "audiobook.wav"

        # Create a simple placeholder audio file
        try:
            # Create a placeholder text file indicating audio would be generated here
            with open(audio_path.with_suffix('.txt'), 'w') as f:
                f.write(f"Audio file would be generated here for:\n\n{text[:200]}...")

            return audio_path.with_suffix('.txt')
        except Exception as e:
            logger.error(f"Audio generation error: {e}")
            return None

    def save_project_metadata(self, project_folder, original_text, rewritten_text, tone, project_name):
        """Save project metadata"""
        metadata = {
            "project_name": project_name,
            "creation_date": datetime.now().isoformat(),
            "tone": tone,
            "original_length": len(original_text.split()),
            "rewritten_length": len(rewritten_text.split()),
            "original_text": original_text,
            "rewritten_text": rewritten_text
        }

        metadata_path = project_folder / "metadata" / "project_info.json"
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)

        # Save text files
        text_folder = project_folder / "text"
        with open(text_folder / "original.txt", 'w', encoding='utf-8') as f:
            f.write(original_text)

        with open(text_folder / "rewritten.txt", 'w', encoding='utf-8') as f:
            f.write(rewritten_text)

    def create_download_package(self, project_folder):
        """Create a downloadable zip package"""
        zip_buffer = BytesIO()

        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            for file_path in project_folder.rglob('*'):
                if file_path.is_file():
                    arcname = file_path.relative_to(project_folder)
                    zip_file.write(file_path, arcname)

        zip_buffer.seek(0)
        return zip_buffer

def main():
    # Page configuration
    st.set_page_config(
        page_title="EchoVerse - AI Audiobook Creator",
        page_icon="üéß",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Custom CSS for attractive UI
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .feature-box {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    .stSelectbox > div > div {
        background-color: #f0f2f6;
    }
    </style>
    """, unsafe_allow_html=True)

    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üéß EchoVerse</h1>
        <h3>AI-Powered Audiobook Creation Tool</h3>
        <p>Transform your text into expressive, downloadable audio content</p>
    </div>
    """, unsafe_allow_html=True)

    # Initialize EchoVerse
    if 'echoverse' not in st.session_state:
        st.session_state.echoverse = EchoVerse()

    # Sidebar
    with st.sidebar:
        st.markdown("### üîß Project Settings")
        project_name = st.text_input("Project Name", value="My Audiobook", help="Give your audiobook project a name")

        st.markdown("### üé≠ Voice & Tone")
        tone = st.selectbox(
            "Select Tone",
            ["Neutral", "Suspenseful", "Inspiring"],
            help="Choose the tone for your audiobook"
        )

        st.markdown("### üìä Features")
        st.markdown("""
        <div class="feature-box">
        ‚úÖ AI-powered tone adjustment<br>
        ‚úÖ Individual project folders<br>
        ‚úÖ Text and audio export<br>
        ‚úÖ IBM Granite AI integration<br>
        ‚úÖ Accessibility focused
        </div>
        """, unsafe_allow_html=True)

    # Main content area
    col1, col2 = st.columns([1, 1])

    with col1:
        st.markdown("### üìù Input Text")

        # Text input options
        input_method = st.radio("Choose input method:", ["Paste Text", "Upload File"])

        if input_method == "Paste Text":
            user_text = st.text_area(
                "Enter your text:",
                height=300,
                placeholder="Paste your text here to convert it into an audiobook...",
                help="Enter the text you want to convert to audio"
            )
        else:
            uploaded_file = st.file_uploader("Choose a text file", type=['txt'])
            if uploaded_file:
                user_text = str(uploaded_file.read(), "utf-8")
                st.text_area("Uploaded content:", value=user_text, height=300, disabled=True)
            else:
                user_text = ""

    with col2:
        st.markdown("### üé® Enhanced Text Preview")
        if 'user_text' in locals() and user_text:
            with st.spinner("ü§ñ AI is enhancing your text..."):
                enhanced_text = st.session_state.echoverse.rewrite_text_with_tone(user_text, tone)

            st.text_area(
                f"Text with {tone} tone:",
                value=enhanced_text,
                height=300,
                help="AI-enhanced version of your text"
            )
        else:
            st.info("üëÜ Enter or upload text to see the AI-enhanced version")

    # Generation section
    st.markdown("---")
    st.markdown("### üéß Generate Audiobook")

    col3, col4, col5 = st.columns([1, 1, 1])

    with col4:
        generate_btn = st.button(
            "üéµ Generate Audiobook",
            type="primary",
            help="Create your audiobook with the selected tone",
            use_container_width=True
        )

    # Process generation
    if generate_btn and 'user_text' in locals() and user_text:
        with st.spinner("üé≠ Creating your audiobook..."):
            try:
                # Create project folder
                project_folder = st.session_state.echoverse.create_project_folder(project_name)

                # Get enhanced text
                enhanced_text = st.session_state.echoverse.rewrite_text_with_tone(user_text, tone)

                # Generate audio (placeholder)
                audio_path = st.session_state.echoverse.text_to_speech_placeholder(enhanced_text, project_folder)

                # Save metadata
                st.session_state.echoverse.save_project_metadata(
                    project_folder, user_text, enhanced_text, tone, project_name
                )

                st.success("‚úÖ Audiobook generated successfully!")

                # Display results
                col_res1, col_res2 = st.columns([1, 1])

                with col_res1:
                    st.markdown("#### üìä Project Summary")
                    st.info(f"""
                    *Project:* {project_name}
                    *Tone:* {tone}
                    *Original Words:* {len(user_text.split())}
                    *Enhanced Words:* {len(enhanced_text.split())}
                    *Project Folder:* {project_folder.name}
                    """)

                with col_res2:
                    st.markdown("#### üì• Download")

                    # Create download package
                    zip_buffer = st.session_state.echoverse.create_download_package(project_folder)

                    st.download_button(
                        label="üì¶ Download Complete Project",
                        data=zip_buffer.getvalue(),
                        file_name=f"{project_name}_audiobook.zip",
                        mime="application/zip",
                        use_container_width=True
                    )

                    st.success("üéâ Your audiobook project is ready!")

            except Exception as e:
                st.error(f"‚ùå Error generating audiobook: {str(e)}")
                logger.error(f"Generation error: {e}")

    elif generate_btn:
        st.warning("‚ö† Please enter or upload text first!")

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 2rem;">
        <p>üéß EchoVerse - Making content accessible through AI-powered audio generation</p>
        <p><small>Powered by IBM Granite AI ‚Ä¢ Built with Streamlit</small></p>
    </div>
    """, unsafe_allow_html=True)

def create_interface():
    """Create and return the Streamlit interface"""
    return main()

if __name__ == "__main__":
    # Create and launch the interface
    app = create_interface()
    app.launch(
        share=True,
        debug=True,
        server_name="127.0.0.1",
        server_port=7860
    )

pip install streamlit